// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MycoMatrix.Models;

#nullable disable

namespace MycoMatrix.Migrations
{
    [DbContext(typeof(MycoMatrixContext))]
    [Migration("20240220232021_ReseedDb")]
    partial class ReseedDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MycoMatrix.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MycoMatrix.Models.Mushroom", b =>
                {
                    b.Property<int>("MushroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Editor")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Genus")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GillType")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageURL")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Species")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ToxicityLevel")
                        .HasColumnType("int");

                    b.HasKey("MushroomId");

                    b.ToTable("Mushrooms");

                    b.HasData(
                        new
                        {
                            MushroomId = 1,
                            CommonName = "Black Trumpet",
                            Editor = "Kim Robinson",
                            Genus = "Craterellus",
                            GillType = "Ridged",
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Craterellus_cornucopioides_Eestis.JPG/800px-Craterellus_cornucopioides_Eestis.JPG",
                            Notes = "choice edible, grows under oak and beech trees",
                            Species = "cornucopioides",
                            ToxicityLevel = 0
                        },
                        new
                        {
                            MushroomId = 2,
                            CommonName = "Golden Chanterelle",
                            Editor = "Mickey Mouse",
                            Genus = "Cantharellus",
                            GillType = "Ridged",
                            ImageURL = "https://d2ci82p1s8eczl.cloudfront.net/wp-content/uploads/20231219151006/castatemushroom-scaled.jpg",
                            Notes = "choice edible, grows in conifer forests under Douglas Fir, spruce and hemlocks",
                            Species = "cibarius",
                            ToxicityLevel = 0
                        },
                        new
                        {
                            MushroomId = 3,
                            CommonName = "Morel",
                            Editor = "Kim Robinson",
                            Genus = "Morchella",
                            GillType = "None",
                            ImageURL = "https://media.istockphoto.com/id/1059075136/photo/a-large-group-of-morels-by-a-stream.jpg?s=612x612&w=0&k=20&c=QU-hajnz7xC60AGuQhsJWOAx7MpVB4sWbMB0xEE3vVI=",
                            Notes = "may cause some stomach upset in certain individuals, must cook thoroughly",
                            Species = "esculenta",
                            ToxicityLevel = 3
                        },
                        new
                        {
                            MushroomId = 4,
                            CommonName = "Chicken of the woods",
                            Editor = "Henry Oberholtzer",
                            Genus = "Laetiporus",
                            GillType = "Polypore",
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Laetiporus_sulphureus_JPG01.jpg/1920px-Laetiporus_sulphureus_JPG01.jpg",
                            Notes = "may cause some GI upset in some individuals, grows on dead or dying trees",
                            Species = "sulphureus",
                            ToxicityLevel = 3
                        },
                        new
                        {
                            MushroomId = 5,
                            CommonName = "Black Trumpet",
                            Editor = "Kim Robinson",
                            Genus = "Craterellus",
                            GillType = "Ridged",
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Craterellus_cornucopioides_Eestis.JPG/800px-Craterellus_cornucopioides_Eestis.JPG",
                            Notes = "choice edible, grows under oak and beech trees",
                            Species = "cornucopioides",
                            ToxicityLevel = 0
                        },
                        new
                        {
                            MushroomId = 6,
                            CommonName = "Deadly Galerina",
                            Editor = "Paul Stamets",
                            Genus = "Galerina",
                            GillType = "Gills",
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Craterellus_cornucopioides_Eestis.JPG/800px-Craterellus_cornucopioides_Eestis.JPG",
                            Notes = "contains amatoxins, has been confused with Psilocybe stuntzii",
                            Species = "marginata",
                            ToxicityLevel = 10
                        },
                        new
                        {
                            MushroomId = 7,
                            CommonName = "Fly Agaric",
                            Editor = "Henry Oberholtzer",
                            Genus = "Amanita",
                            GillType = "Gills",
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Amanita_muscaria_3_vliegenzwammen_op_rij.jpg/1920px-Amanita_muscaria_3_vliegenzwammen_op_rij.jpg",
                            Notes = "won't kill you",
                            Species = "muscaria",
                            ToxicityLevel = 5
                        },
                        new
                        {
                            MushroomId = 8,
                            CommonName = "toxic black mold",
                            Editor = "Paul Stamets",
                            Genus = "Stachybotrys",
                            GillType = "None",
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/7/7c/2009-05-09_Stachybotrys_chartarum_%28Ehrenb.%29_S._Hughes_43158.jpg",
                            Notes = "One of the worst fungi to encounter",
                            Species = "chartarum",
                            ToxicityLevel = 8
                        },
                        new
                        {
                            MushroomId = 9,
                            CommonName = "Turkey Tail",
                            Editor = "Kim Robinson",
                            Genus = "Trametes",
                            GillType = "Pores",
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/Trametes_versicolor_G4_%281%29.JPG/1280px-Trametes_versicolor_G4_%281%29.JPG",
                            Notes = "edible, medicinal",
                            Species = "versicolor",
                            ToxicityLevel = 0
                        },
                        new
                        {
                            MushroomId = 10,
                            CommonName = "Crystal Brain",
                            Editor = "Henry Oberholtzer",
                            Genus = "Myxarium",
                            GillType = "None",
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/9/95/Crystal_Brain_Fungus_%28Exidia_nucleata%29_-_geograph.org.uk_-_1000447.jpg",
                            Notes = "Unknown if edible or not",
                            Species = "nucleatum",
                            ToxicityLevel = 0
                        },
                        new
                        {
                            MushroomId = 11,
                            CommonName = "Magic Mushrooms",
                            Editor = "Paul Stamets",
                            Genus = "Psilocybe",
                            GillType = "Gills",
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7f/Cubensis_Xalapa.jpg/1280px-Cubensis_Xalapa.jpg",
                            Notes = "The classic tripper's delight",
                            Species = "cubensis",
                            ToxicityLevel = 2
                        },
                        new
                        {
                            MushroomId = 12,
                            CommonName = "Cordyceps",
                            Editor = "Pedro Pascal",
                            Genus = "Ophiocordyceps ",
                            GillType = "None",
                            ImageURL = "https://upload.wikimedia.org/wikipedia/commons/thumb/8/85/Ophiocordyceps_unilateralis.png/800px-Ophiocordyceps_unilateralis.png",
                            Notes = "If you're an ant it's bad news, otherwise it's medicinal",
                            Species = "unilateralis",
                            ToxicityLevel = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MycoMatrix.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MycoMatrix.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MycoMatrix.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MycoMatrix.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
